/* $Id$ */

#ifndef EGECKOCOM_INC
#define EGECKOCOM_INC

#include "iegecko.h"	// Generated by 'xpidl'.
#include "str.h"
#include "nsxpcm.h"
#include "lstbch.h"
#include "tol.h"

#define EGECKOCOM_CONTRACTID "@zeusw.org/egeckocom;1"
#define EGECKOCOM_CLASSNAME "EGeckocom"
// {f1e695a0-b2f1-4a30-ac62-48a9edd9558a}
#define EGECKOCOM_CID  IEGECKOCOM_IID

E_ROW( krow__ );

class bridge__
{
private:
	krow__ _KernelRow;
public:
	void reset( bso::bool__ = true )
	{
		_KernelRow = NONE;
	}
	bridge__()
	{
		reset( false );
	}
	~bridge__()
	{
		reset();
	}
	void Init( krow__ KernelRow )
	{
#ifdef XXX_DBG
		if ( _KernelRow != NONE )
			ERRu();
#endif
		reset();

		_KernelRow = KernelRow;
	}
	const class kernel___ &Kernel( void ) const;
	class kernel___ &Kernel( void );
	const class ui__ &UI( void ) const;
	class ui__ &UI( void );
};

class ui_textbox__
: public nsxpcm::textbox__,
  public bridge__
{
protected:
	virtual void NSXPCMOnCommand( void ){}
	virtual void NSXPCMOnClick( void ){}
	virtual void NSXPCMOnInput( void );
/*	{
	ERRProlog
		str::string Value;
	ERRBegin
		Value.Init();
		this->GetValue( Value );
		nsxpcm::Log( Value );

//		this->Kernel().Propagate();
		epeios::row__ Row = Global.First();

		while ( Row != NONE ) {
			Global( Row )->Set( Value );

			Row = Global.Next( Row );
		}
	ERRErr
	ERREnd
	ERREpilog
	}
*/	virtual void NSXPCMOnFocus( void ){}
	virtual void NSXPCMOnBlur( void ){}
public:
	void Init( krow__ KernelRow )
	{
		bridge__::Init( KernelRow );
		// 'nsxpcm::button__::Init()' called later.
	}
};

typedef ui_textbox__	ui_input_textbox__;

class ui_label__
: public nsxpcm::label__,
  public bridge__
{
protected:
	virtual void NSXPCMOnCommand( void ){}
	virtual void NSXPCMOnClick( void ){}
	virtual void NSXPCMOnInput( void ){}
	virtual void NSXPCMOnFocus( void ){}
	virtual void NSXPCMOnBlur( void ){}
public:
	void Init( krow__ KernelRow )
	{
		bridge__::Init( KernelRow );
		// 'nsxpcm::label__::Init()' called later.
	}
};

typedef ui_label__	ui_output_label__;

class ui_checkbox__
: public nsxpcm::checkbox__,
  public bridge__
{
protected:
	virtual void NSXPCMOnCommand( void ){}
	virtual void NSXPCMOnClick( void ){}
	virtual void NSXPCMOnInput( void ){}
	virtual void NSXPCMOnFocus( void ){}
	virtual void NSXPCMOnBlur( void ){}
public:
	void Init( krow__ KernelRow )
	{
		bridge__::Init( KernelRow );
		// 'nsxpcm::checkbox__::Init()' called later.
	}
};

typedef ui_checkbox__	ui_shared_checkbox__;

class ui_button__
: public nsxpcm::button__,
  public bridge__
{
protected:
	virtual void NSXPCMOnInput( void ){}
	virtual void NSXPCMOnFocus( void ){}
	virtual void NSXPCMOnBlur( void ){}
public:
	void Init( krow__ KernelRow )
	{
		bridge__::Init( KernelRow );
		// 'nsxpcm::button__::Init()' called later.
	}
};

class ui_error_button__
: public ui_button__
{
protected:
	virtual void NSXPCMOnCommand( void ) {}
	virtual void NSXPCMOnClick( void );
};

class ui__
{
public:
	nsIDOMDocument *Document;
	nsIDOMWindow *Window;
	ui_input_textbox__ Input;
	ui_shared_checkbox__ Shared;
	ui_output_label__ Output;
	ui_error_button__ Error;
	void Init( void )
	{}
};

class kernel___
{
private:
	str::string _Text;
public:
	ui__ UI;
	void reset( bso::bool__ P = true )
	{
		_Text.reset( P );
	}
	kernel___()
	{
		reset( false );
	}
	~kernel___()
	{
		reset();
	}
	void Init( void )
	{
		reset();

		_Text.Init();

		UI.Init();

	}
	void InputToOutput( void )
	{
	ERRProlog
		str::string Value;
	ERRBegin
		Value.Init();
		UI.Input.GetValue( Value );
		UI.Output.SetValue( Value );
	ERRErr
	ERREnd
	ERREpilog
	}
	void InputToAllOutputs( void );
};

inline void ui_input_textbox__::NSXPCMOnInput( void )
{
	if ( UI().Shared.IsChecked() )
		Kernel().InputToAllOutputs();
	else
		Kernel().InputToOutput();
}

extern class global
: public lstbch::E_LBUNCHt( kernel___ *, krow__ )
{
private:
	krow__ _CurrentKernelRow;
public:
	global() 
	{
		_CurrentKernelRow = NONE;
		Init();
	}
	void CreateNewKernel( void )
	{
		kernel___ *Kernel = NULL;

		if ( _CurrentKernelRow != NONE )
			ERRu();

		if ( ( Kernel = new kernel___ ) == NULL )
			ERRa();

		_CurrentKernelRow = Add( Kernel );

		Get( _CurrentKernelRow )->Init();
	}
	void DismissCurrentKernel( void )
	{
		if ( _CurrentKernelRow == NONE )
			ERRu();

		_CurrentKernelRow = NONE;
	}
	krow__ GetCurrentKernelRow( void ) const
	{
		if ( _CurrentKernelRow == NONE )
			ERRu();

		return _CurrentKernelRow;
	}
	kernel___ &GetCurrentKernel( void )
	{
		return *Get( GetCurrentKernelRow() );
	}
	const kernel___ &GetCurrentKernel( void ) const
	{
		return *Get( GetCurrentKernelRow() );
	}
	void Delete( krow__ KernelRow )
	{
#ifdef XXX_DBG
		if ( !Exists( KernelRow ) )
			ERRu();
#endif
		delete Get( KernelRow );

		Store( NULL, KernelRow );

		lstbch::E_LBUNCHt( kernel___ *, krow__ )::Delete( KernelRow );

	}

} Global;

inline kernel___ &bridge__::Kernel( void )
{
	return *Global.Get( _KernelRow );
}

inline ui__ &bridge__::UI( void )
{
	return Kernel().UI;
}

inline void kernel___::InputToAllOutputs( void )
{
ERRProlog
	str::string Value;
ERRBegin
	Value.Init();
	UI.Input.GetValue( Value );

	krow__ Row = Global.First();

	while ( Row != NONE ) {

		Global.Get( Row )->UI.Output.SetValue( Value );

		Row = Global.Next( Row );
	}

ERRErr
ERREnd
ERREpilog
}

#include "nsIDOMNodeList.h"
#include "nsIDOMWindow.h"

void ui_error_button__::NSXPCMOnClick( void )
{
//	nsxpcm::QueryInterface<nsIDOMWindowInternal>( UI().Window )->Alert( NS_LITERAL_STRING( "Yesss !" ) );
	ERRu();
}




class egeckocom
: public iegeckocom
{
public:
  NS_DECL_ISUPPORTS
  NS_DECL_IEGECKOCOM

  egeckocom();
  krow__ _KernelRow;
private:
  ~egeckocom();
protected:
  /* additional members */
};

#endif