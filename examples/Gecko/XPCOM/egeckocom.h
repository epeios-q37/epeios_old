/* $Id$ */

#ifndef EGECKOCOM_INC
#define EGECKOCOM_INC

#include "iegecko.h"	// Generated by 'xpidl'.
#include "str.h"
#include "nsxpcm.h"
#include "lstbch.h"
#include "tol.h"

#define EGECKOCOM_CONTRACTID "@zeusw.org/egeckocom;1"
#define EGECKOCOM_CLASSNAME "EGeckocom"
// {f1e695a0-b2f1-4a30-ac62-48a9edd9558a}
#define EGECKOCOM_CID  IEGECKOCOM_IID

E_ROW( krow__ );

class kernel_access__
{
private:
	krow__ _KernelRow;
public:
	void reset( bso::bool__ = true )
	{
		_KernelRow = NONE;
	}
	kernel_access__()
	{
		reset( false );
	}
	~kernel_access__()
	{
		reset();
	}
	void Init( krow__ KernelRow )
	{
#ifdef XXX_DBG
		if ( _KernelRow != NONE )
			ERRu();
#endif
		reset();

		_KernelRow = KernelRow;
	}
	const class kernel___ &Kernel( void ) const;
	class kernel___ &Kernel( void );
};

class ui_textbox__
: public nsxpcm::textbox__,
  public kernel_access__
{
protected:
	virtual void NSXPCMOnCommand( void ){}
	virtual void NSXPCMOnClick( void ){}
	virtual void NSXPCMOnInput( void );
/*	{
	ERRProlog
		str::string Value;
	ERRBegin
		Value.Init();
		this->GetValue( Value );
		nsxpcm::Log( Value );

//		this->Kernel().Propagate();
		epeios::row__ Row = Global.First();

		while ( Row != NONE ) {
			Global( Row )->Set( Value );

			Row = Global.Next( Row );
		}
	ERRErr
	ERREnd
	ERREpilog
	}
*/	virtual void NSXPCMOnFocus( void ){}
	virtual void NSXPCMOnBlur( void ){}
public:
	void Init( krow__ KernelRow )
	{
		kernel_access__::Init( KernelRow );
		// 'nsxpcm::button__::Init()' called later.
	}
};

class ui_label__
: public nsxpcm::label__,
  public kernel_access__
{
protected:
	virtual void NSXPCMOnCommand( void ){}
	virtual void NSXPCMOnClick( void ){}
	virtual void NSXPCMOnInput( void ){}
	virtual void NSXPCMOnFocus( void ){}
	virtual void NSXPCMOnBlur( void ){}
public:
	void Init( krow__ KernelRow )
	{
		kernel_access__::Init( KernelRow );
		// 'nsxpcm::button__::Init()' called later.
	}
};

class ui_checkbox__
: public nsxpcm::checkbox__,
  public kernel_access__
{
protected:
	virtual void NSXPCMOnCommand( void ){}
	virtual void NSXPCMOnClick( void ){}
	virtual void NSXPCMOnInput( void ){}
	virtual void NSXPCMOnFocus( void ){}
	virtual void NSXPCMOnBlur( void ){}
public:
	void Init( krow__ KernelRow )
	{
		kernel_access__::Init( KernelRow );
		// 'nsxpcm::button__::Init()' called later.
	}
};

class ui_button__
: public nsxpcm::button__,
  public kernel_access__
{
protected:
	virtual void NSXPCMOnInput( void ){}
	virtual void NSXPCMOnFocus( void ){}
	virtual void NSXPCMOnBlur( void ){}
public:
	void Init( krow__ KernelRow )
	{
		kernel_access__::Init( KernelRow );
		// 'nsxpcm::button__::Init()' called later.
	}
};

class ui_set_button__
: public ui_button__
{
protected:
	virtual void NSXPCMOnCommand( void ) {}
	virtual void NSXPCMOnClick( void ) {}
};

class ui_get_button__
: public ui_button__
{
	virtual void NSXPCMOnCommand( void ) {}
	virtual void NSXPCMOnClick( void ) {}
};

class ui__
{
public:
	nsIDOMDocument *Document;
	ui_textbox__ Text;
	ui_checkbox__ Shared;
	ui_label__ Label;
	ui_set_button__ Set;
	ui_get_button__ Get;
	void Init( void )
	{}
};

class kernel___
: public ui__
{
private:
	str::string _Text;
public:
	void reset( bso::bool__ P = true )
	{
		_Text.reset( P );
	}
	kernel___()
	{
		reset( false );
	}
	~kernel___()
	{
		reset();
	}
	void Init( void )
	{
		reset();

		_Text.Init();

		ui__::Init();

	}
	void Store( void )
	{
		_Text.Init();
		Text.GetValue( _Text );
	}
	void Recall( void )
	{
		Text.SetValue( _Text );
	}
	void CopyToLabel( void )
	{
	ERRProlog
		str::string Value;
	ERRBegin
		Value.Init();
		Text.GetValue( Value );
		Label.SetValue( Value );
	ERRErr
	ERREnd
	ERREpilog
	}
	void SetLabel( const str::string_ &Value )
	{
		Label.SetValue( Value );
	}
	void PropagateToLabels( void );
};

inline void ui_textbox__::NSXPCMOnInput( void )
{
	if ( Kernel().Shared.IsChecked() )
		Kernel().PropagateToLabels();
	else
		Kernel().CopyToLabel();
}

extern class global
: public lstbch::E_LBUNCHt( kernel___ *, krow__ )
{
private:
	krow__ _CurrentKernelRow;
public:
	global() 
	{
		_CurrentKernelRow = NONE;
		Init();
	}
	void CreateNewKernel( void )
	{
		kernel___ *Kernel = NULL;

		if ( _CurrentKernelRow != NONE )
			ERRu();

		if ( ( Kernel = new kernel___ ) == NULL )
			ERRa();

		_CurrentKernelRow = Add( Kernel );

		Get( _CurrentKernelRow )->Init();
	}
	void DismissCurrentKernel( void )
	{
		if ( _CurrentKernelRow == NONE )
			ERRu();

		_CurrentKernelRow = NONE;
	}
	krow__ GetCurrentKernelRow( void ) const
	{
		if ( _CurrentKernelRow == NONE )
			ERRu();

		return _CurrentKernelRow;
	}
	kernel___ &GetCurrentKernel( void )
	{
		return *Get( GetCurrentKernelRow() );
	}
	const kernel___ &GetCurrentKernel( void ) const
	{
		return *Get( GetCurrentKernelRow() );
	}
} Global;

inline kernel___ &kernel_access__::Kernel( void )
{
	return *Global.Get( _KernelRow );
}

inline void kernel___::PropagateToLabels( void )
{
ERRProlog
	str::string Value;
ERRBegin
	Value.Init();
	Text.GetValue( Value );

	krow__ Row = Global.First();

	while ( Row != NONE ) {

		Global.Get( Row )->Label.SetValue( Value );

		Row = Global.Next( Row );
	}

ERRErr
ERREnd
ERREpilog
}



class egeckocom
: public iegeckocom
{
public:
  NS_DECL_ISUPPORTS
  NS_DECL_IEGECKOCOM

  egeckocom();

private:
  ~egeckocom();
protected:
  /* additional members */
};

#endif