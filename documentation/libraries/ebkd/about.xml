
<!-- $Id$-->
<content>
  <section>
    <para>All interactive software, like those wich have a graphical interface, are consituted by 2 parts. One is the interface, the part which is used by the user to introduce commands and which displays the result of this commands, and the other is the treatment, the one which handles and transforms the data provided by the user. This 2 parts should be clearly separated, because this simplifies the coding and makes it easy to maintain and to improve software.</para>
    <para>As often, in the real life, things are not as they have to be. In this case, this is due by the fact that the interface and the treatment are often coded in the same language and using the same development tools. It seems so easy to develop both part together, especially when using the RAD technology. But so wrong !</para>
    <para>I will not explain here why you should develop interface and treatment separately ; if you are not convinced, ask someone which have coded an interactive software (as already written, almost all software with a graphical interface, even a WEB one, are interactive) of some importance.</para>
  </section>
  <section>
    <para xml:space="preserve">OK, let's talk about the <raw>ebkd</raw> libraries.</para>
  </section>
  <section>
    <para xml:space="preserve">The <raw>ebkd</raw> libraries are designed to help by the development of the backend part of a software, i.e. the treatment, in opposite of the frontend, which is the interface. Backend and frontend communicate using a dedicated protocol. They can communicate through socket, pipes, and other channel (they use the <raw>flow</raw> object from the Epeios <raw>FLW</raw> core library).</para>
    <para>The backend can be used as a daemon, in a multi user mode (the same backend can so be used by more than one frontend simultaneously), or in a mono-tasking, single user mode, like most of the interactive software. The best in this story is, when you coding the backend, you haven't to worry in which mode you will use it, because you have only to change one line in your source to switch from one mode to the other (only to indicate which one of the dedicated 2 objects from the Epeios libraries you want to use). If you plan to use your backend as a daemon, the fact that you can switch it in a single user/mono-tasking mode will make the debugging of the backend very easy.</para>
  </section>
  <section>
    <para xml:space="preserve">Concerning the frontend, the API will be generated automagically. There is an Epeios tool, called <raw>getbkdapi</raw>, which connects to the backend and gets all the available objects and their methods. Then it generates a XML file wich describes all this object and methods.</para>
    <para xml:space="preserve">For a given language, there is only to write the libraries which implements the Epeios protocol, and the XSL file which will transform the XML file from the <raw>getbkdapi</raw> tool in sources suitable for this language. For one language, this library and the XSL file have only to be written once, and can then be used to generate the API in this language for each new backend. The library and the XSL file already exist for the <raw>C++</raw>, and I plan to wrote them for <raw>JAVA</raw> and <raw>Python</raw>.</para>
  </section>
</content>